function [S1, S2, Rd, Vd] = signal(EQ64, EQ256)
    c = 3*10^8; %скорость света
    B = 50*10^6; %полоса модуляции в Гц
    fm = 8*10^3; %частота повторения пилы в Гц    
    tau = 1300*10^-9; %задержка сигнала до максимальной дальности в м
    f0 = 24e9; %несущая частота
    
    Tm = 1/fm; %период повторения пилы
    fb = B*tau/Tm; %дальностная частота до максимальной дистанции
    Rd = c/(2*B); %разрешение по дальности
    Vd = (fm*c)/(2*EQ64*f0);  %разрешение по скорости
    tk = 5*10^-9;
    I = Tm/tk; %количество отсчетов в одном периоде пилы
    
    % ЦЕЛЬ 1
    fd1 = -2000; %частота доплера    
    R1 = 320; %дальность до цели
    tau1 = 2*R1/c; %
    fb1 = B*tau1/Tm; %
    J1 = tau1/tk; %задержка в осчетах модели

    % ЦЕЛЬ 2
    fd2 = 1000; %частота доплера
    R2 = 200;
    tau2 = 2*R2/c;
    fb2 = B*tau2/Tm;
    J2 = tau2/tk;
    
    % ЦЕЛЬ 3
    fd3 = -3000; %частота доплера
    R3 = 50;
    tau3 = 2*R3/c;
    fb3 = B*tau3/Tm;
    J3 = tau3/tk;

    %Модель сигнала
    b = B/Tm; %коэффициент ЛЧМ
    FF = EQ64; %количество накапливаемых периодов
    mu=0; %мат.ожидание
    sigma=0.1; %СКО
    RAND=(mu+sigma.*randn(1,1));
    %1 канал
    for i=0:1:I-1
        for j = 0:1:FF-1
            ZOND(i+1,j+1) = sin(2*pi*tk*i + pi*b*(i*tk)^2); %модель зондирующего сигнала        
            
            S1_RX(i+1,j+1) = sin(2*pi*(i+J1)*tk + pi*b*((i+J1)*tk)^2 + 2*pi*fd1*j*Tm + (mu+sigma.*randn(1,1))) + RAND; %модель принятого сигнала ЦЕЛЬ 1
            S1_RX(i+1,j+1) = S1_RX(i+1,j+1) + sin(2*pi*(i+J2)*tk + pi*b*((i+J2)*tk)^2 + 2*pi*fd2*j*Tm + (mu+sigma.*randn(1,1))) + RAND; %модель принятого сигнала ЦЕЛЬ 2  
            S1_RX(i+1,j+1) = S1_RX(i+1,j+1) + sin(2*pi*(i+J3)*tk + pi*b*((i+J3)*tk)^2 + 2*pi*fd3*j*Tm + (mu+sigma.*randn(1,1))) + RAND; %модель принятого сигнала ЦЕЛЬ 3  
                        
            S1_SM(i+1,j+1)=(ZOND(i+1,j+1)*S1_RX(i+1,j+1)); %модель сигнала с выхода смесителя
        end;
    end;
    
    rsm_p = 2; % нужно для преобразования сигнала в EQ256 отсчетов
    rsm_q = double(int16(rsm_p*size(S1_SM,1)/EQ256));
    S1=resample(S1_SM,rsm_p,rsm_q); % пересчет (дискретизация) сигнала
    %S1(:,:)=0;    
    while (size(S1,1) > EQ256) % если пересчет дал больше 256 точек
        S1(size(S1,1),:) = []; %модель сигнала после АЦП
    end;

    %2 канал
    f_1=pi*10/180;
    fi2=f_1;
    l=sqrt(-1);
    for i=0:1:I-1
        for j = 0:1:FF-1
        %МОДЕЛЬ ЗОНДИРУЮЩЕГО СИГНАЛА ТА ЖЕ
        S2_RX(i+1,j+1) = exp(l*fi2)*sin(2*pi*(i+1+J1)*tk + pi*b*((i+1+J1)*tk)^2 + 2*pi*fd1*(j+1)*Tm+RAND)+RAND; %модель принятого сигнала ЦЕЛЬ 1
        S2_RX(i+1,j+1) = S2_RX(i+1,j+1) + exp(l*fi2)*sin(2*pi*(i+1+J2)*tk + pi*b*((i+1+J2)*tk)^2 + 2*pi*fd2*(j+1)*Tm+RAND)+RAND; %модель принятого сигнала ЦЕЛЬ 2 
        S2_RX(i+1,j+1) = S2_RX(i+1,j+1) + exp(l*fi2)*sin(2*pi*(i+1+J3)*tk + pi*b*((i+1+J3)*tk)^2 + 2*pi*fd3*(j+1)*Tm+RAND)+RAND; %модель принятого сигнала ЦЕЛЬ 3
        
        S2_SM(i+1,j+1)=(ZOND(i+1,j+1)*S2_RX(i+1,j+1)); %модель сигнала с выхода смесителя
        end;
    end;
    rsm_p = 2; % нужно для преобразования сигнала в EQ256 отсчетов
    rsm_q = double(int16(rsm_p*size(S2_SM,1)/EQ256));
    S2=resample(S2_SM,rsm_p,rsm_q); % пересчет (дискретизация) сигнала
    %S2(:,:)=0;
    while (size(S2,1) > EQ256) % если пересчет дал больше 256 точек
        S2(size(S2,1),:) = []; %модель сигнала после АЦП
    end;
end
