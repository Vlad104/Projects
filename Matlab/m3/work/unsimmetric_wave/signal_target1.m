function [S1, S2, Rd, Vd] = signal_target1(EQ64, EQ256)
    %инициализация матриц
    ZOND(1:25000,1:64) = 0;
    S1_RX(1:25000,1:64) = 0;
    S2_RX(1:25000,1:64) = 0;
    S1_SM(1:25000,1:64) = 0;
    S2_SM(1:25000,1:64) = 0;
    S1(1:256,1:64) = 0;
    S2(1:256,1:64) = 0;

    c = 3*10^8; %скорость света
    B = 50*10^6; %полоса модуляции в Гц
    fm = 8*10^3; %частота повторения пилы в Гц    
    tau0 = 1300*10^-9; %задержка сигнала до максимальной дальности в м
    f0 = 24e9; %несущая частота
    
    Tm = 1/fm; %период повторения пилы
    fb0 = B*tau0/Tm; %дальностная частота до максимальной дистанции
    Rd = c/(2*B); %разрешение по дальности
    Vd = (fm*c)/(2*EQ64*f0);  %разрешение по скорости
    kk = 5*10^-9;
    I = Tm/kk; %количество отсчетов в одном периоде пилы
    
    %Модель сигнала
    b = B/Tm; %коэффициент ЛЧМ
    FF = EQ64; %количество накапливаемых периодов
    mu=0; %мат.ожидание
    sigma=0.1; %СКО
    RAND=(mu+sigma.*randn(1,1));
    
    N = 1; %кол-во целей
    fd(1:N) = 0; 
    R(1:N) = 0; 
    tau(1:N) = 0; 
    fb(1:N) = 0; 
    J(1:N) = 0;
    fi(1:N) = 0;
    
    % ЦЕЛЬ 1
    V(1) = 1*Vd;
    fd(1) = V(1)*f0*2/c;   
    R(1) = 100; %дальность до цели
    fi(1) = 41*pi/180; %угол пеленга в рад
    tau(1) = 2*R(1)/c; %
    J(1) = tau(1)/kk; %задержка в осчетах модели
    fb(1) = B*tau(1)/Tm; %
    
    %Зондирующий сигнал
    for i=0:1:I-1
        for j = 0:1:FF-1
            ZOND(i+1,j+1) = sin(2*pi*kk*i*f0 + pi*b*(i*kk)^2); %модель зондирующего сигнала        
        end;
    end;  
    
    frx1 =  2*pi/180;
    frx2 = -2*pi/180;
    l = sqrt(-1);
    %Сигналы, принытые антенной
    for i=0:1:I-1
        for j = 0:1:FF-1
            for z = 1:1:N
                freq = 2*pi*(i+J(z))*kk*f0 + pi*b*((i+J(z))*kk)^2 + 2*pi*fd(z)*j*Tm;
                S1_RX(i+1,j+1) = exp(frx1*l)*exp(fi(z)*l)*sin(freq + (mu+sigma.*randn(1,1))) + RAND;
                S2_RX(i+1,j+1) = exp(frx2*l)*exp(fi(z)*l)*sin(freq + (mu+sigma.*randn(1,1))) + RAND;
            end;
        end;
    end;
    
    %Сигналы на выходе смесителя
    for i=0:1:I-1
        for j = 0:1:FF-1    
            S1_SM(i+1,j+1)=(ZOND(i+1,j+1)*S1_RX(i+1,j+1)); 
            S2_SM(i+1,j+1)=(ZOND(i+1,j+1)*S2_RX(i+1,j+1));
        end;
    end; 
       
    
    rsm_p = 2; % нужно для преобразования сигнала в EQ256 отсчетов
    rsm_q = double(int16(rsm_p*size(S1_SM,1)/EQ256));
    S1=resample(S1_SM,rsm_p,rsm_q); % пересчет (дискретизация) сигнала
    S2=resample(S2_SM,rsm_p,rsm_q); % пересчет (дискретизация) сигнала 
    while (size(S1,1) > EQ256) % если пересчет дал больше 256 точек
        S1(size(S1,1),:) = []; %модель сигнала после АЦП
    end;
    while (size(S2,1) > EQ256) % если пересчет дал больше 256 точек
        S2(size(S2,1),:) = []; %модель сигнала после АЦП
    end;
end